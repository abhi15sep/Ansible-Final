- name: play database install
  hosts: db
  become: yes
  tags:
  - db-install
  tasks:
    # sudo apt-get install gnupg
  - name: gnupg is installed
    package:
      name: gnupg
      state: present
    # wget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add -
  - name: mongodb-key is added
    apt_key:
      url: https://www.mongodb.org/static/pgp/server-4.2.asc
    # echo "deb http://repo.mongodb.org/apt/debian buster/mongodb-org/4.2 main" | sudo tee /etc/apt/sources.list.d/mongodb.list
  - name: mongo-db repo is enabled
    apt_repository:
      repo: deb http://repo.mongodb.org/apt/debian buster/mongodb-org/4.2 main
      state: present
      filename: mongodb

    # sudo apt install mongodb-org
  - name: mongodb is installed
    package:
      name: mongodb-org
      state: present
    # sudo systemctl enable mongod
    # sudo systemctl start mongod 
  - name: mongodb is started
    service:
      name: mongod
      state: started
      enabled: yes
- name: play database  - configure admin
  hosts: db
  become: yes
  tags:
  - db-config-admin
  tasks:
    #2) drop admin user if exist
    # mongo admin --eval 'db.dropUser("superadmin")'
    #3) create admin user
    # mongo admin --eval 'db.createUser( { user: "superadmin", pwd: "MyPass1234", roles: [ { role: "clusterAdmin", db: "admin" }, { role: "userAdminAnyDatabase", db: "admin" } ] } )'
  - name: admin user
    command: "{{ item }}"
    loop:
    - mongo admin --eval 'db.dropUser("{{ db_admin_user }}")'
    - |
      mongo admin --eval 'db.createUser( { user: "{{ db_admin_user }}", pwd: "{{ db_admin_pass }}", roles: [ { role: "clusterAdmin", db: "admin" }, { role: "userAdminAnyDatabase", db: "admin" } ] } )'
  - name: security is enabled
    blockinfile:
      path: /etc/mongod.conf
      block: |
        security:
          authorization: "enabled"
      state: present
    notify: mongodb is restarted
  handlers:
  - name: mongodb is restarted
    service:
      name: mongod
      state: restarted
  #4) enable security (/etc/mongod.conf) --> Restart Mongodb
  #> security:
  #>   authorization: "enabled"
- name: play - rest of configuration
  hosts: db
  become: yes
  tags:
  - db-config
  tasks:
  - name: pip3 installed
    package:
      name: python3-pip
      state: latest
  - name: pip pymongo installed
    pip:
      name: pymongo
      state: latest
  - name: todo db user exsits
    mongodb_user:
      login_user: "{{ db_admin_user }}"
      login_password: "{{ db_admin_pass }}"
      database: admin
      user: "{{ db_todo_user }}"
      password: "{{ db_todo_pass }}"
      state: present
      roles:
        - db: "{{ db_name_todo }}"
          role: readWrite
  - name: db accepts connection from anywhere
    lineinfile:
      path: /etc/mongod.conf
      line: "  bindIp: 0.0.0.0"
      regexp: '^(.*)bindIp(.*)$'
      state: present
    notify: mongodb is restarted
  handlers:
  - name: mongodb is restarted
    service:
      name: mongod
      state: restarted
